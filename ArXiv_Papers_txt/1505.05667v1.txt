A Re-ranking Model for Dependency Parser
with Recursive Convolutional Neural Network
Chenxi Zhu, Xipeng Qiu∗, Xinchi Chen, Xuanjing Huang

825 Zhangheng Road, Shanghai, China

{czhu13,xpqiu,xinchichen13,xjhuang}@fudan.edu.cn

Shanghai Key Laboratory of Intelligent Information Processing, Fudan University

School of Computer Science, Fudan University

5
1
0
2

 

y
a
M
1
2

 

 
 
]
L
C
.
s
c
[
 
 

1
v
7
6
6
5
0

.

5
0
5
1
:
v
i
X
r
a

Abstract

In this work, we address the prob-
lem to model all
the nodes (words or
phrases) in a dependency tree with the
dense representations. We propose a
recursive convolutional neural network
(RCNN) architecture to capture syntac-
tic and compositional-semantic represen-
tations of phrases and words in a depen-
dency tree. Different with the original re-
cursive neural network, we introduce the
convolution and pooling layers, which can
model a variety of compositions by the
feature maps and choose the most infor-
mative compositions by the pooling lay-
ers. Based on RCNN, we use a discrimina-
tive model to re-rank a k-best list of can-
didate dependency parsing trees. The ex-
periments show that RCNN is very effec-
tive to improve the state-of-the-art depen-
dency parsing on both English and Chi-
nese datasets.

Introduction

1
Feature-based discriminative supervised models
have achieved much progress in dependency pars-
ing (Nivre, 2004; Yamada and Matsumoto, 2003;
McDonald et al., 2005), which typically use mil-
lions of discrete binary features generated from a
limited size training data. However, the ability of
these models is restricted by the design of features.
The number of features could be so large that the
result models are too complicated for practical use
and prone to overﬁt on training corpus due to data
sparseness.

Recently, many methods are proposed to learn
various distributed representations on both syn-
tax and semantics levels. These distributed repre-
sentations have been extensively applied on many

∗ Corresponding author.

Figure 1: Illustration of a RCNN unit.

natural language processing (NLP) tasks, such as
syntax (Turian et al., 2010; Mikolov et al., 2010;
Collobert et al., 2011; Chen and Manning, 2014)
and semantics (Huang et al., 2012; Mikolov et al.,
2013). Distributed representations are to represent
words (or phrase) by the dense, low-dimensional
and real-valued vectors, which help address the
curse of dimensionality and have better general-
ization than discrete representations.

For dependency parsing, Chen et al. (2014)
and Bansal et al. (2014) used the dense vectors
(embeddings) to represent words or features and
found these representations are complementary
to the traditional discrete feature representation.
However, these two methods only focus on the
dense representations (embeddings) of words or
features. These embeddings are pre-trained and
keep unchanged in the training phase of parsing
model, which cannot be optimized for the speciﬁc
tasks.

Besides, it is also important to represent the
(unseen) phrases with dense vector in dependency
parsing. Since the dependency tree is also in re-
cursive structure, it is intuitive to use the recur-
sive neural network (RNN), which is used for con-
stituent parsing (Socher et al., 2013a). However,
recursive neural network can only process the bi-
nary combination and is not suitable for depen-
dency parsing, since a parent node may have two
or more child nodes in dependency tree.

In this work, we address the problem to rep-

a,Detred,JJbike,NNConvolutionPoolinga red bike,NNa bike,NNred bike,NNresent all level nodes (words or phrases) with
dense representations in a dependency tree. We
propose a recursive convolutional neural net-
work (RCNN) architecture to capture syntac-
tic and compositional-semantic representations of
phrases and words. RCNN is a general architec-
ture and can deal with k-ary parsing tree, there-
fore it is very suitable for dependency parsing. For
each node in a given dependency tree, we ﬁrst use
a RCNN unit to model the interactions between it
and each of its children and choose the most infor-
mative features by a pooling layer. Thus, we can
apply the RCNN unit recursively to get the vector
representation of the whole dependency tree. The
output of each RCNN unit is used as the input of
the RCNN unit of its parent node, until it outputs a
single ﬁxed-length vector at root node. Figure 1 il-
lustrates an example how a RCNN unit represents
the phrases “a red bike” as continuous vectors.

The contributions of this paper can be summa-

rized as follows.

• RCNN is a general architecture to model the
distributed representations of a phrase or sen-
tence with its dependency tree. Although
RCNN is just used for the re-ranking of the
dependency parser in this paper, it can be
regarded as semantic modelling of text se-
quences and handle the input sequences of
varying length into a ﬁxed-length vector. The
parameters in RCNN can be learned jointly
with some other NLP tasks, such as text clas-
siﬁcation.

• Each RCNN unit can model the complicated
interactions of the head word and its children.
Combined with a speciﬁc task, RCNN can
capture the most useful semantic and struc-
ture information by the convolution and pool-
ing layers.

• When applied to the re-ranking model for
parsing, RCNN improve the accuracy of base
parser to make accurate parsing decisions.
The experiments on two benchmark datasets
show that RCNN outperforms the state-of-
the-art models.

2 Recursive Neural Network

In this section, we brieﬂy describe the recur-
sive neural network architecture of (Socher et al.,
2013a).

Figure 2: Illustration of a RNN unit.

The idea of recursive neural networks (RNN)
for natural language processing (NLP) is to train a
deep learning model that can be applied to phrases
and sentences, which have a grammatical structure
(Pollack, 1990; Socher et al., 2013c). RNN can be
also regarded as a general structure to model sen-
tence. At every node in the tree, the contexts at the
left and right children of the node are combined
by a classical layer. The weights of the layer are
shared across all nodes in the tree. The layer com-
puted at the top node gives a representation for the
whole sentence.

Following the binary tree structure, RNN can
assign a ﬁxed-length vector to each word at the
leaves of the tree, and combine word and phrase
pairs recursively to create intermediate node vec-
tors of the same length, eventually having one ﬁ-
nal vector representing the whole sentence. Multi-
ple recursive combination functions have been ex-
plored, from linear transformation matrices to ten-
sor products (Socher et al., 2013c). Figure 2 illus-
trates the architecture of RNN.
The binary tree can be represented in the form
of branching triplets (p → c1c2). Each such triplet
denotes that a parent node p has two children and
each ck can be either a word or a non-terminal
node in the tree.
labeled
((p2 → ap1), (p1 → bc)),
tations are computed by

binary
tree,
the node represen-

Given

parse

a

(cid:21)

(cid:20) b

c

(cid:21)

(cid:20) a

p1

p1 = f (W

), p2 = f (W

),

(1)

where (p1, p2, a, b, c) are the vector representa-
tion of (p1, p2, a, b, c) respectively, which are de-
noted by lowercase bold font letters; W is a matrix
of parameters of the RNN.

Based on RNN, Socher et al. (2013a) intro-
duced a compositional vector grammar, which
uses the syntactically untied weights W to learn
the syntactic-semantic, compositional vector rep-
resentations.
In order to compute the score of

a,Detred,JJbike,NNred bike,NPa red bike,NPhow plausible of a syntactic constituent a parent
is, RNN uses a single-unit linear layer for all pi:

s(pi) = v · pi,

(2)

where v is a vector of parameters that need to be
trained. This score will be used to ﬁnd the high-
est scoring tree. For more details on how standard
RNN can be used for parsing, see (Socher et al.,
2011).

Costa et al. (2003) applied recursive neural net-
works to re-rank possible phrase attachments in an
incremental constituency parser. Their work is the
ﬁrst to show that RNNs can capture enough in-
formation to make the correct parsing decisions.
Menchetti et al. (2005) used RNNs to re-rank dif-
ferent constituency parses. For their results on full
sentence parsing, they re-ranked candidate trees
created by the Collins parser (Collins, 2003).

3 Recursive Convolutional Neural

Network

The dependency grammar is a widely used syntac-
tic structure, which directly reﬂects relationships
among the words in a sentence. In a dependency
tree, all nodes are terminal (words) and each node
may have more than two children. Therefore, the
standard RNN architecture is not suitable for de-
pendency grammar since it is based on the binary
tree. In this section, we propose a more general
architecture, called recursive convolutional neu-
ral network (RCNN), which borrows the idea of
convolutional neural network (CNN) and can deal
with to k-ary tree.

3.1 RCNN Unit
For ease of exposition, we ﬁrst describe the ba-
sic unit of RCNN. A RCNN unit is to model a
head word and its children. Different from the
constituent tree, the dependency tree does not have
non-terminal nodes. Each node consists of a word
and its POS tags. Each node should have a differ-
ent interaction with its head node.
Word Embeddings Given a word dictionary W,
each word w ∈ W is represented as a real-valued
vector (word embedding) w ∈ Rm where m is the
dimensionality of the vector space. The word em-
beddings are then stacked into a embedding ma-
trix M ∈ Rm|W|. For a word w ∈ W, its cor-
responding word embedding Embed(w) ∈ Rm is
retrieved by the lookup table layer. The matrix M

Figure 3: Architecture of a RCNN unit.

is initialized with pre-training embeddings and up-
dated by back-propagation.

Distance Embeddings Besides word embed-
dings, we also use distributed vector to represent
the relative distance of a head word h and one of
its children c. For example, as shown in Figure 1,
the relative distances of “bike” to “a” and “red” are
-2 and -1, respectively. The relative distances also
are mapped to a vector of dimension md (a hy-
perparameter); this vector is randomly initialized.
Distance embedding is a usual way to encode the
distance information in neural model, which has
been proven effectively in several tasks. Our ex-
perimental results also show that the distance em-
bedding gives more beneﬁts than the traditional
representation. The relative distance can encode
the structure information of a subtree.

Convolution The word and distance embed-
dings are subsequently fed into the convolution
component to model the interactions between two
linked nodes.

Different with standard RNN, there are no non-
terminal nodes in dependency tree. Each node h
in dependency tree has two associated distributed
representations:
1. word embedding wh ∈ Rm, which is denoted
as its own information according to its word
form;

xh =xKx2x1whd(h,ci)ConvolutionMax pooling·········tanh···Phrase Representations of ChildrenWord EmbeddingDistance Embedding2. phrase representation xh ∈ Rm, which is de-
noted as the joint representation of the whole
subtree rooted at h. In particular, when h is
leaf node, xh = wh.

Given a subtree rooted at h in dependency tree,
we deﬁne ci, 0 < i ≤ L as the i-th child node of
h, where L represents the number of children.

For each pair (h, ci), we use a convolutional
hidden layer to compute their combination repre-
sentation zi.

zi = tanh(W(h,ci)pi), 0 < i ≤ K,

(3)
where W(h,ci) ∈ Rm×n is the linear composition
matrix, which depends on the POS tags of h and
ci; pi ∈ Rn is the concatenated representation of
h and the i-th child, which consists of the head
word embeddings wh, the child phrase represen-
tation xci and the distance embeddings dh,ci of h
and ci,

pi = xh ⊕ xci ⊕ d(h,ci),

(4)
where ⊕ represents the concatenation operation.
The distances dh,ci is the relative distance of h
and ci in a given sentence. Then, the relative dis-
tances also are mapped to m-dimensional vectors.
Different from constituent tree, the combination
should consider the order or position of each child
in dependency tree.

In our model, we do not use the POS tags em-
beddings directly. Since the composition matrix
varies on the different pair of POS tags of h and
ci, it can capture the different syntactic combina-
tions. For example, the combination of adjective
and noun should be different with that of verb and
noun.

After the composition operations, we use tanh
as the non-linear activation function to get a hid-
den representation z.
Max Pooling After convolution, we get Z(h) =
[z1, z2,··· , zK], where K is dynamic and de-
pends on the number of children of h. To trans-
form Z to a ﬁxed length and determine the most
useful semantic and structure information, we per-
form a max pooling operation to Z on rows.

x(h)
j = max

(5)
Thus, we obtain the vector representation xh ∈

j,i , 0 < j ≤ m.
Z(h)

i

Rm of the whole subtree rooted at node h.

Figure 3 shows the architecture of our proposed

RCNN unit.

Figure 4: Example of a RCNN unit

Given a whole dependency tree, we can apply
the RCNN unit recursively to get the vector rep-
resentation of the whole sentence. The output of
each RCNN unit is used as the input of the RCNN
unit of its parent node.

Thus, RCNN can be used to model the dis-
tributed representations of a phrase or sentence
with its dependency tree and applied to many NLP
tasks. The parameters in RCNN can be learned
jointly with the speciﬁc NLP tasks. Each RCNN
unit can model the complicated interactions of the
head word and its children. Combined with a spe-
ciﬁc task, RCNN can select the useful semantic
and structure information by the convolution and
max pooling layers.

Figure 4 shows an example of RCNN to model

the sentence “I eat sashimi with chopsitcks”.

4 Parsing
In order to measure the plausibility of a subtree
rooted at h in dependency tree, we use a single-
unit linear layer neural network to compute the
score of its RCNN unit.

For constituent parsing, the representation of a
non-terminal node only depends on its two chil-
dren. The combination is relative simple and its
correctness can be measured with the ﬁnal repre-
sentation of the non-terminal node (Socher et al.,
2013a).
However for dependency parsing, all combina-
tions of the head h and its children ci(0 < i ≤ K)
are important to measure the correctness of the
subtree. Therefore, our score function s(h) is
computed on all of hidden layers zi(0 < i ≤ K):

K(cid:88)

s(h) =

v(h,ci) · zi,

(6)

i=1

where v(h,ci) ∈ Rm×1 is the score vector, which

rooteatsashimiIwithchopsticksRCNN Unitw(eat)w(I)w(sashimi)x(with)x(eat)RCNN Unitx(root)w(root)RCNN Unitw(with)w(chopsticks)also depends on the POS tags of h and ci.

Given a sentence x and its dependency tree y,
the goodness of a complete tree is measured by
summing the scores of all the RCNN units.

We use a generalization of gradient descent
called subgradient method (Ratliff et al., 2007)
which computes a gradient-like direction. The
subgradient of equation is:

s(x, y, Θ) =

s(h),

(7)

∂J
∂Θ

=

1
|D|

∂st(xi, ˆyi, Θ)

(

−

∂Θ

(cid:88)

h∈y

where h ∈ y is the node in tree y; Θ =
{ΘW, Θv, Θw, Θd} including the combination
matrix set ΘW, the score vector set Θv, the word
embeddings Θw and distance embeddings Θd.

Finally, we can predict dependency tree ˆy with

highest score for sentence x.

) + λΘ.

(12)

To minimize the objective, we use the diagonal
variant of AdaGrad (Duchi et al., 2011). The pa-
rameter update for the i-th parameter Θt,i at time
step t is as follows:

ˆy = arg max
y∈gen(x)

s(x, y, Θ),

(8)

Θt,i = Θt−1,i −

(cid:88)

(xi,yi)∈D
∂st(xi, yi, Θ)

∂Θ

where gen(x) is deﬁned as the set of all possible
trees for sentence x. When applied in re-ranking,
gen(x) is the set of the k-best outputs of a base
parser.

5 Training
For a given training instance (xi, yi), we use the
max-margin criterion to train our model. We ﬁrst
predict the dependency tree ˆyi with the highest
score for each xi and deﬁne a structured margin
loss ∆(yi, ˆyi) between the predicted tree ˆyi and
the given correct tree yi. ∆(yi, ˆyi) is measured
by counting the number of nodes yi with an incor-
rect span (or label) in the proposed tree (Goodman,
1998).

∆(yi, ˆyi) =

κ1{d /∈ yi}

(9)

(cid:88)

d∈ ˆyi

where κ is a discount parameter and d represents
the nodes in trees.
Given a set of training dependency parses D,
the ﬁnal training objective is to minimize the loss
function J(Θ), plus a l2-regulation term:
(cid:107)Θ(cid:107)2
2,

(cid:88)

ri(Θ) +

J(Θ) =

(10)

1
|D|

λ
2

(xi,yi)∈D

where

ri(Θ) = max
ˆyi∈Y (xi)

( 0, st(xi, ˆyi, Θ)

+ ∆(yi, ˆyi) − st(xi, yi, Θ) ) .

(11)

By minimizing this object, the score of the cor-
rect tree yi is increased and the score of the highest
scoring incorrect tree ˆyi is decreased.

ρ(cid:113)(cid:80)t

τ =1 g2
τ,i

gt,i,

(13)

where ρ is the initial learning rate and gτ ∈ R|θi|
is the subgradient at time step τ for parameter θi.

6 Re-rankers

Re-ranking k-best lists was introduced by Collins
and Koo (2005) and Charniak and Johnson (2005).
They used discriminative methods to re-rank the
constituent parsing.
In the dependency parsing,
Sangati et al. (2009) used a third-order generative
model for re-ranking k-best lists of base parser.
Hayashi et al. (2013) used a discriminative for-
est re-ranking algorithm for dependency parsing.
These re-ranking models achieved a substantial
raise on the parsing performances.
Given T (x), the set of k-best trees of a sentence
x from a base parser, we use the popular mixture
re-ranking strategy (Hayashi et al., 2013; Le and
Mikolov, 2014), which is a combination of the our
model and the base parser.

ˆyi = arg max
y∈T (xi)

αst(xi, y, Θ) + (1 − α)sb(xi, y)
(14)
where α ∈ [0, 1] is a hyperparameter; st(xi, y, Θ)
and sb(xi, y) are the scores given by RCNN and
the base parser respectively.

To apply RCNN into re-ranking model, we ﬁrst
get the k-best outputs of all sentences in train
set with a base parser. Thus, we can train the
RCNN in a discriminative way and optimize the
re-ranking strategy for a particular base parser.

Note that the role of RCNN is not fully valued
when applied in re-ranking model since that the
gen(x) in Eq.(8) is just the k-best outputs of a base

parser, not the set of all possible trees for sentence
x. The parameters of RCNN could overﬁt to k-
best outputs of training set.
7 Experiments
7.1 Datasets
To empirically demonstrate the effectiveness of
our approach, we use two datasets in different lan-
guages (English and Chinese) in our experimen-
tal evaluation and compare our model against the
other state-of-the-art methods using the unlabeled
attachment score (UAS) metric ignoring punctua-
tion.
English For English dataset, we follow the stan-
dard splits of Penn Treebank (PTB), using
sections 2-21 for training, section 22 as de-
velopment set and section 23 as test set. We
tag the development and test sets using an au-
tomatic POS tagger (at 97.2% accuracy), and
tag the training set using four-way jackknif-
ing similar to (Collins and Koo, 2005).

Chinese For Chinese dataset, we follow the same
split of the Penn Chinese Treeban (CTB5)
as described in (Zhang and Clark, 2008) and
use sections 001-815, 1001-1136 as training
set, sections 886-931, 1148- 1151 as devel-
opment set, and sections 816-885, 1137-1147
as test set. Dependencies are converted by us-
ing the Penn2Malt tool with the head-ﬁnding
rules of (Zhang and Clark, 2008). And fol-
lowing (Zhang and Clark, 2008) (Zhang and
Nivre, 2011), we use gold segmentation and
POS tags for the input.

We use the linear-time incremental parser
(Huang and Sagae, 2010) as our base parser and
calculate the 64-best parses at the top cell of the
chart. Note that we optimize the training settings
for base parser and the results are slightly im-
proved on (Huang and Sagae, 2010). Then we use
max-margin criterion to train RCNN. Finally, we
use the mixture strategy to re-rank the top 64-best
parses.
For

initialization of parameters, we train
word2vec embeddings (Mikolov et al., 2013) on
Wikipedia corpus for English and Chinese respec-
tively. For the combination matrices and score
vectors, we use the random initialization within
(0.01, 0.01). The parameters which achieve the
best unlabeled attachment score on the develop-
ment set will be chosen for the ﬁnal evaluation.

95

90

85

80

75

)

%
(
S
A
U

WRB JJR WDT VBG VBP JJS

Base Paser

CC MD IN

RB
Re-ranker

Figure 6: Accuracies on the top ten POS tags of
the modiﬁer words with the largest improvements
on the development set.

7.2 English Dataset
We ﬁrst evaluate the performances of the RCNN
and re-ranker (Eq. (14)) on the development set.
Figure 5 shows UASs of different models with
varying k. The base parser achieves 92.45%.
When k = 64, the oracle best of base parser
achieves 97.34%, while the oracle worst achieves
73.30% (-19.15%) . RCNN achieves the maxi-
mum improvement of 93.00%(+0.55%) when k =
6. When k > 6, the performance of RCNN de-
clines with the increase of k but is still higher
than baseline (92.45%). The reason behind this
is that RCNN could require more negative sam-
ples to avoid overﬁtting when k is large. Since the
negative samples are limited in the k-best outputs
of a base parser, the learnt parameters could easily
overﬁts to the training set.

The mixture re-ranker achieves the maximum
improvement of 93.50%(+1.05%) when k = 64.
In mixture re-ranker, α is optimised by searching
with the step-size 0.005.

Therefore, we use the mixture re-ranker in the
following experiments since it can take the advan-
tages of both the RCNN and base models.

Figure 6 shows the accuracies on the top ten
POS tags of the modiﬁer words with the largest
improvements. We can see that our re-ranker
can improve the accuracies of CC and IN, and
therefore may indirectly result in rising the the
well-known coordinating conjunction and PP-
attachment problems.

The ﬁnal experimental results on test set are
shown in Table 1. The hyperparameters of our

)

%
(
S
A
U

97

96

95

94

93

92

Oracle Best

RCNN

Re-ranker

)

%
(
S
A
U

95

90

85

80

75

Oracle Best

Oracle Worst

RCNN

Re-ranker

1 2 3 4 5 6 7 8 9 10 32 64

1 2 3 4 5 6 7 8 9 10 32 64

k

k

(a) without the oracle worst result

(b) with the oracle worst result

Figure 5: UAS with varying k on the development set. Oracle best: always choosing the best result in the
k-best of base parser; Oracle worst: always choosing the worst result in the k-best of base parser; RCNN:
choosing the most probable candidate according to the score of RCNN; Re-ranker: a combination of the
RCNN and base parser.

model are set as in Table 2. Our re-ranker achieves
the maximum improvement of 93.83%(+1.48%)
on test set. Our system performs slightly better
than many state-of-the-art systems such as Zhang
and Clark (2008) and Huang and Sagae (2010).
It outperforms Hayashi et al. (2013) and Le and
Zuidema (2014), which also use the mixture re-
ranking strategy.

Since the result of ranker is conditioned to k-
best results of base parser, we also do an experi-
ment to avoid this limitation by adding the oracle
to k-best candidates. With including oracle, the
re-ranker can achieve 94.16% on UAS, which is
shown in the last line (“our re-ranker (with ora-
cle)”) of Table 1.

7.3 Chinese Dataset

We also make experiments on the Penn Chinese
Treebank (CTB5). The hyperparameters is the
same as the previous experiment on English except
that α is optimised by searching with the step-size
0.005.

The ﬁnal experimental results on the test set
are shown in Table 3. Our re-ranker achieves the
performance of 85.71%(+0.25%) on the test set,
which also outperforms the previous state-of-the-
art methods. With adding oracle, the re-ranker can
achieve 87.43% on UAS, which is shown in the
last line (“our re-ranker (with oracle)”) of Table 3.
Compared with the re-ranking model of Hayashi et
al. (2013), that use a large number of handcrafted

Traditional Methods
Zhang and Clark (2008)
Huang and Sagae (2010)
Distributed Representations
Stenetorp (2013)
Chen et al. (2014)
Chen and Manning (2014)
Re-rankers
Hayashi et al. (2013)
Le and Zuidema (2014)
Our baseline
Our re-ranker
Our re-ranker (with oracle)

UAS

91.4
92.1

86.25
93.74
92.0

93.12
93.12
92.35

93.83(+1.48)

94.16

Table 1: Accuracy on English test set. Our base-
line is the result of base parser; our re-ranker uses
the mixture strategy on the 64-best outputs of base
parser; our re-ranker(with oracle) is to add the or-
acle to k-best outputs of base parser.

features, our model can achieve a competitive per-
formance with the minimal feature engineering.

7.4 Discussions
The performance of the re-ranking model is af-
fected by the base parser. The small divergence of
the dependency trees in the output list also results
to overﬁtting in training phase. Although our re-
ranker outperforms the state-of-the-art methods, it
can also beneﬁt from improving the quality of the

Word embedding size
m = 25
Distance embedding size md = 25
Initial learning rate
ρ = 0.1
Margin loss discount
κ = 2.0
λ = 10−4
Regularization
k-best
k = 64

Table 2: Hyperparameters of our model

Traditional Methods
Zhang and Clark (2008)
Huang and Sagae (2010)
Distributed Representations
Chen et al. (2014)
Chen and Manning (2014)
Re-rankers
Hayashi et al. (2013)
Our baseline
Our re-ranker
Our re-ranker (with oracle)

UAS

84.33
85.20

82.94
83.9

85.9
85.46

85.71(+0.25)

87.43

Table 3: Accuracy on Chinese test set.

candidate results. It was also reported in other re-
ranking works that a larger k (eg. k > 64) results
the worse performance. We think the reason is that
the oracle best increases when k is larger, but the
oracle worst decrease with larger degree. The er-
ror types increase greatly. The re-ranking model
requires more negative samples to avoid overﬁt-
ting. When k is larger, the number of negative
samples also needs to multiply increase for train-
ing. However, we just can obtain at most k neg-
ative samples from the k-best outputs of the base
parser.

The experiments also show that the our model
can achieves signiﬁcant improvements by adding
the oracles into the output lists of the base parser.
This indicates that our model can be boosted by
a better set of the candidate results, which can be
implemented by combining the RCNN in the de-
coding algorithm.

8 Related Work

There have been several works to use neural net-
works and distributed representation for depen-
dency parsing.

Stenetorp (2013) attempted to build recursive
neural networks for transition-based dependency
parsing, however the empirical performance of his

Figure 7: Example of a DT-RNN unit

model is still unsatisfactory. Chen and Manning
(2014) improved the transition-based dependency
parsing by representing all words, POS tags and
arc labels as dense vectors, and modeled their in-
teractions with neural network to make predictions
of actions. Their methods aim to transition-based
parsing and can not model the sentence in seman-
tic vector space for other NLP tasks.

Socher et al. (2013b) proposed a composi-
tional vectors computed by dependency tree RNN
(DT-RNN) to map sentences and images into a
common embedding space. However, there are
two major differences as follows. 1) They ﬁrst
summed up all child nodes into a dense vector vc
and then composed subtree representation from vc
and vector parent node.
In contrast, our model
ﬁrst combine the parent and each child and then
choose the most informative features with a pool-
ing layer. 2) We represent the relative position
of each child and its parent with distributed rep-
resentation (position embeddings), which is very
useful for convolutional layer. Figure 7 shows an
example of DTRNN to illustrates how RCNN rep-
resents phrases as continuous vectors.

Speciﬁc to the re-ranking model, Le and
Zuidema (2014) proposed a generative re-ranking
model with Inside-Outside Recursive Neural Net-
work (IORNN), which can process trees both
bottom-up and top-down. However,
IORNN
works in generative way and just estimates the
probability of a given tree, so IORNN cannot fully
utilize the incorrect trees in k-best candidate re-
sults. Besides, IORNN treats dependency tree as a
sequence, which can be regarded as a generaliza-
tion of simple recurrent neural network (SRNN)
(Elman, 1990). Unlike IORNN, our proposed
RCNN is a discriminative model and can opti-
mize the re-ranking strategy for a particular base
parser. Another difference is that RCNN computes
the score of tree in a recursive way, which is more
natural for the hierarchical structure of natural lan-

Σa,Detred,JJbike,NNa red bike,NNguage. Besides, the RCNN can not only be used
for the re-ranking, but also be regarded as general
model to represent sentence with its dependency
tree.

9 Conclusion
In this work, we address the problem to rep-
resent all level nodes (words or phrases) with
dense representations in a dependency tree. We
propose a recursive convolutional neural net-
work (RCNN) architecture to capture the syntac-
tic and compositional-semantic representations of
phrases and words. RCNN is a general architec-
ture and can deal with k-ary parsing tree, there-
fore RCNN is very suitable for many NLP tasks
to minimize the effort in feature engineering with
a external dependency parser. Although RCNN
is just used for the re-ranking of the dependency
parser in this paper, it can be regarded as seman-
tic modelling of text sequences and handle the in-
put sequences of varying length into a ﬁxed-length
vector. The parameters in RCNN can be learned
jointly with some other NLP tasks, such as text
classiﬁcation.

For the future research, we will develop an inte-
grated parser to combine RCNN with a decoding
algorithm. We believe that the integrated parser
can achieve better performance without the limi-
tation of base parser. Moreover, we also wish to
investigate the ability of our model for other NLP
tasks.

Acknowledgments
We would like to thank the anonymous review-
ers for their valuable comments.
This work
was partially funded by National Natural Sci-
ence Foundation of China (61472088, 61473092),
The National High Technology Research and De-
velopment Program of China (2015AA015408),
Shanghai Science and Technology Development
Funds (14ZR1403200), Shanghai Leading Aca-
demic Discipline Project (B114).

References
[Bansal et al.2014] Mohit Bansal, Kevin Gimpel, and
Karen Livescu. 2014. Tailoring continuous word
representations for dependency parsing. In Proceed-
ings of the Annual Meeting of the Association for
Computational Linguistics.

[Charniak and Johnson2005] Eugene Charniak

and
Mark Johnson. 2005. Coarse-to-ﬁne n-best parsing

In Proceed-
and maxent discriminative reranking.
ings of the 43rd Annual Meeting of the Association
for Computational Linguistics (ACL’05), pages
173–180, Ann Arbor, Michigan, June. Association
for Computational Linguistics.

[Chen and Manning2014] Danqi Chen and Christo-
pher D Manning. 2014. A fast and accurate de-
pendency parser using neural networks. In Proceed-
ings of the 2014 Conference on Empirical Methods
in Natural Language Processing (EMNLP), pages
740–750.

[Chen et al.2014] Wenliang Chen, Yue Zhang, and Min
Zhang. 2014. Feature embedding for dependency
parsing. In Proceedings of COLING 2014, the 25th
International Conference on Computational Lin-
guistics: Technical Papers, pages 816–826, Dublin,
Ireland, August. Dublin City University and Associ-
ation for Computational Linguistics.

[Collins and Koo2005] Michael Collins and Terry Koo.
2005. Discriminative reranking for natural language
parsing. Computational Linguistics, 31(1):25–70.

[Collins2003] Michael Collins. 2003. Head-driven sta-
tistical models for natural language parsing. Com-
putational linguistics, 29(4):589–637.

[Collobert et al.2011] Ronan Collobert, Jason Weston,
L´eon Bottou, Michael Karlen, Koray Kavukcuoglu,
and Pavel Kuksa. 2011. Natural language process-
ing (almost) from scratch. The Journal of Machine
Learning Research, 12:2493–2537.

[Costa et al.2003] Fabrizio Costa, Paolo Frasconi, Vin-
cenzo Lombardo, and Giovanni Soda. 2003. To-
wards incremental parsing of natural language us-
ing recursive neural networks. Applied Intelligence,
19(1-2):9–25.

[Duchi et al.2011] John Duchi, Elad Hazan, and Yoram
Singer. 2011. Adaptive subgradient methods for on-
line learning and stochastic optimization. The Jour-
nal of Machine Learning Research, 12:2121–2159.

[Elman1990] Jeffrey L Elman. 1990. Finding structure

in time. Cognitive science, 14(2):179–211.

[Goodman1998] Joshua Goodman.

inside-out. arXiv preprint cmp-lg/9805007.

1998.

Parsing

[Hayashi et al.2013] Katsuhiko

Shuhei
Kondo, and Yuji Matsumoto.
Efﬁcient
stacked dependency parsing by forest reranking.
TACL, 1:139–150.

Hayashi,
2013.

[Huang and Sagae2010] Liang Huang and Kenji Sagae.
2010. Dynamic programming for linear-time incre-
mental parsing. In Proceedings of the 48th Annual
Meeting of the Association for Computational Lin-
guistics, pages 1077–1086. Association for Compu-
tational Linguistics.

[Socher et al.2011] Richard Socher, Cliff C Lin, Chris
Manning, and Andrew Y Ng. 2011. Parsing natu-
ral scenes and natural language with recursive neural
networks. In Proceedings of the 28th International
Conference on Machine Learning (ICML-11), pages
129–136.

[Socher et al.2013a] Richard Socher,

John Bauer,
Christopher D Manning, and Andrew Y Ng. 2013a.
Parsing with compositional vector grammars. In In
Proceedings of the ACL conference. Citeseer.

[Socher et al.2013b] Richard Socher, Q Le, C Manning,
and A Ng. 2013b. Grounded compositional se-
mantics for ﬁnding and describing images with sen-
tences. In NIPS Deep Learning Workshop.

[Socher et al.2013c] Richard Socher, Alex Perelygin,
Jean Wu, Jason Chuang, Christopher D. Manning,
Andrew Ng, and Christopher Potts. 2013c. Recur-
sive deep models for semantic compositionality over
a sentiment treebank. In EMNLP.

[Stenetorp2013] Pontus Stenetorp. 2013. Transition-
based dependency parsing using recursive neural
networks. In NIPS Workshop on Deep Learning.

[Turian et al.2010] Joseph Turian, Lev Ratinov, and
Yoshua Bengio. 2010. Word representations: a sim-
ple and general method for semi-supervised learn-
ing. In ACL.

2003.

[Yamada and Matsumoto2003] H. Yamada and Y. Mat-
sumoto.
Statistical dependency analysis
In Proceedings of
with support vector machines.
the International Workshop on Parsing Technologies
(IWPT), volume 3.

[Zhang and Clark2008] Yue Zhang and Stephen Clark.
2008. A tale of two parsers: investigating and com-
bining graph-based and transition-based dependency
In Proceedings of the
parsing using beam-search.
Conference on Empirical Methods in Natural Lan-
guage Processing, pages 562–571. Association for
Computational Linguistics.

[Zhang and Nivre2011] Yue Zhang and Joakim Nivre.
2011. Transition-based dependency parsing with
rich non-local features. In Proceedings of the 49th
Annual Meeting of the Association for Computa-
tional Linguistics: Human Language Technologies:
short papers-Volume 2, pages 188–193. Association
for Computational Linguistics.

[Huang et al.2012] Eric Huang,

Richard
Socher,
Christopher Manning, and Andrew Ng.
2012.
Improving word representations via global context
In Proceedings
and multiple word prototypes.
of
the Association
for Computational Linguistics (Volume 1: Long
Papers), pages 873–882, Jeju Island, Korea, July.
Association for Computational Linguistics.

the 50th Annual Meeting of

[Le and Mikolov2014] Quoc V. Le and Tomas Mikolov.
2014. Distributed representations of sentences and
documents. In Proceedings of ICML.

[Le and Zuidema2014] Phong Le and Willem Zuidema.
2014. The inside-outside recursive neural network
In Proceedings of
model for dependency parsing.
the 2014 Conference on Empirical Methods in Nat-
ural Language Processing (EMNLP), pages 729–
739, Doha, Qatar, October. Association for Compu-
tational Linguistics.

[McDonald et al.2005] Ryan McDonald, Koby Cram-
mer, and Fernando Pereira. 2005. Online large-
margin training of dependency parsers. In Proceed-
ings of the 43rd Annual Meeting on Association for
Computational Linguistics, ACL ’05, pages 91–98.

[Menchetti et al.2005] Sauro Menchetti,

Fabrizio
Costa, Paolo Frasconi, and Massimiliano Pontil.
2005. Wide coverage natural language process-
ing using kernel methods and neural networks
for structured data. Pattern Recognition Letters,
26(12):1896–1906.

[Mikolov et al.2010] Tomas Mikolov, Martin Karaﬁ´at,
Lukas Burget, Jan Cernock`y, and Sanjeev Khudan-
pur. 2010. Recurrent neural network based lan-
guage model. In INTERSPEECH.

[Mikolov et al.2013] Tomas Mikolov, Ilya Sutskever,
Kai Chen, Greg S Corrado, and Jeff Dean. 2013.
Distributed representations of words and phrases
In Advances in Neural
and their compositionality.
Information Processing Systems.

[Nivre2004] Joakim Nivre. 2004. Incrementality in de-
terministic dependency parsing. In Proceedings of
the Workshop on Incremental Parsing: Bringing En-
gineering and Cognition Together, pages 50–57. As-
sociation for Computational Linguistics.

[Pollack1990] Jordan B Pollack.

1990. Recursive
distributed representations. Artiﬁcial Intelligence,
46(1):77–105.

[Ratliff et al.2007] Nathan D Ratliff, J Andrew Bagnell,
and Martin A Zinkevich. 2007. (online) subgradient
In Eleventh In-
methods for structured prediction.
ternational Conference on Artiﬁcial Intelligence and
Statistics (AIStats).

Sangati,
Willem
[Sangati et al.2009] Federico
2009. A generative
Zuidema, and Rens Bod.
In Pro-
re-ranking model for dependency parsing.
ceedings of the 11th International Conference on
Parsing Technologies, pages 238–241. Association
for Computational Linguistics.

